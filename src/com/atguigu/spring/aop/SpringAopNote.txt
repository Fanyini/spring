1、SpringAop
	1）、加入jar包
	
	com.springsource.org.aopalliance-1.0.0.jar
	com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar
	spring-aop-4.0.0.RELEASE.jar
	spring-aspects-4.0.0.RELEASE.jar

	commons-logging-1.1.1.jar
	spring-beans-4.0.0.RELEASE.jar
	spring-context-4.0.0.RELEASE.jar
	spring-core-4.0.0.RELEASE.jar
	spring-expression-4.0.0.RELEASE.jar
	
	2）、在配置文件中加入aop 的命名空间
	
	3）、基于注解的方式
	
		①、在配置文件中加入如下配置：
		
		<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
		
		②、把切面关注点的代码抽象到切面的类中
		
			i、	切面首先是一个IOC中的bean， 即加入 @Component 注解
			ii、	切面还需要加入@Aspect 注解
		
		③、在类中加入各种通知
			
			i、	声明一个方法
			ii、在方法前加入 @Before注解
			
		④、可以在通知方法中声明一个JionPoint的参数，然后就能访问链接细节，如方法的方法名和参数值
		
		@Aspect
		@Component
		public class LoggingAspect {
		
			// 声明一个前置通知，在目标方法之前执行
			@Before("execution(public int com.atguigu.spring.aop.impl.ArithmeticCalculatorImpl.*(int, int))")
			// JoinPoint : 连接点
			public void beforeMethod(JoinPoint joinPoint){
				String methodName = joinPoint.getSignature().getName();// 返回调用的方法名
				List<Object> args = Arrays.asList(joinPoint.getArgs());// 获取参数 
				System.out.println("The method begins with " + args);
			}
		}